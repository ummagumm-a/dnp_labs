# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chord_pb2 as chord__pb2


class RegistryStub(object):
    """TODO: 1. verify whether the FindReply works as intended: the FindReply object can contain 2 or 3 fields as indicated in the assignment description
    TODO: 2. possibly optimize the classes structure: (after guaranteeing minimal functionality)

    the register service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register = channel.unary_unary(
                '/Registry/register',
                request_serializer=chord__pb2.RegisterRequest.SerializeToString,
                response_deserializer=chord__pb2.RegisterReply.FromString,
                )
        self.deregister = channel.unary_unary(
                '/Registry/deregister',
                request_serializer=chord__pb2.DeregisterRequest.SerializeToString,
                response_deserializer=chord__pb2.DeregisterReply.FromString,
                )
        self.populate_finger_table = channel.unary_unary(
                '/Registry/populate_finger_table',
                request_serializer=chord__pb2.PopulateRequest.SerializeToString,
                response_deserializer=chord__pb2.PopulateReply.FromString,
                )
        self.get_chord_info = channel.unary_unary(
                '/Registry/get_chord_info',
                request_serializer=chord__pb2.InfoRequest.SerializeToString,
                response_deserializer=chord__pb2.InfoReply.FromString,
                )


class RegistryServicer(object):
    """TODO: 1. verify whether the FindReply works as intended: the FindReply object can contain 2 or 3 fields as indicated in the assignment description
    TODO: 2. possibly optimize the classes structure: (after guaranteeing minimal functionality)

    the register service
    """

    def register(self, request, context):
        """called ONLY by Node objects
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deregister(self, request, context):
        """called ONLY by Node objects
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def populate_finger_table(self, request, context):
        """called ONLY by Node objects
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_chord_info(self, request, context):
        """called ONLY BY CLIENT
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=chord__pb2.RegisterRequest.FromString,
                    response_serializer=chord__pb2.RegisterReply.SerializeToString,
            ),
            'deregister': grpc.unary_unary_rpc_method_handler(
                    servicer.deregister,
                    request_deserializer=chord__pb2.DeregisterRequest.FromString,
                    response_serializer=chord__pb2.DeregisterReply.SerializeToString,
            ),
            'populate_finger_table': grpc.unary_unary_rpc_method_handler(
                    servicer.populate_finger_table,
                    request_deserializer=chord__pb2.PopulateRequest.FromString,
                    response_serializer=chord__pb2.PopulateReply.SerializeToString,
            ),
            'get_chord_info': grpc.unary_unary_rpc_method_handler(
                    servicer.get_chord_info,
                    request_deserializer=chord__pb2.InfoRequest.FromString,
                    response_serializer=chord__pb2.InfoReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Registry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Registry(object):
    """TODO: 1. verify whether the FindReply works as intended: the FindReply object can contain 2 or 3 fields as indicated in the assignment description
    TODO: 2. possibly optimize the classes structure: (after guaranteeing minimal functionality)

    the register service
    """

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Registry/register',
            chord__pb2.RegisterRequest.SerializeToString,
            chord__pb2.RegisterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deregister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Registry/deregister',
            chord__pb2.DeregisterRequest.SerializeToString,
            chord__pb2.DeregisterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def populate_finger_table(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Registry/populate_finger_table',
            chord__pb2.PopulateRequest.SerializeToString,
            chord__pb2.PopulateReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_chord_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Registry/get_chord_info',
            chord__pb2.InfoRequest.SerializeToString,
            chord__pb2.InfoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class NodeStub(object):
    """//////////////////////////////////////////////////////////////////////////////////////////////////////////

    the node service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_finger_table = channel.unary_unary(
                '/Node/get_finger_table',
                request_serializer=chord__pb2.InfoRequest.SerializeToString,
                response_deserializer=chord__pb2.InfoReply.FromString,
                )
        self.save_key = channel.unary_unary(
                '/Node/save_key',
                request_serializer=chord__pb2.SaveRequest.SerializeToString,
                response_deserializer=chord__pb2.SaveReply.FromString,
                )
        self.remove_key = channel.unary_unary(
                '/Node/remove_key',
                request_serializer=chord__pb2.RemoveRequest.SerializeToString,
                response_deserializer=chord__pb2.RemoveReply.FromString,
                )
        self.find_key = channel.unary_unary(
                '/Node/find_key',
                request_serializer=chord__pb2.FindRequest.SerializeToString,
                response_deserializer=chord__pb2.FindReply.FromString,
                )
        self.quit = channel.unary_unary(
                '/Node/quit',
                request_serializer=chord__pb2.QuitRequest.SerializeToString,
                response_deserializer=chord__pb2.QuitReply.FromString,
                )
        self.predecessor_notification = channel.unary_unary(
                '/Node/predecessor_notification',
                request_serializer=chord__pb2.NotificationRequest.SerializeToString,
                response_deserializer=chord__pb2.NotificationReply.FromString,
                )
        self.successor_notification = channel.unary_unary(
                '/Node/successor_notification',
                request_serializer=chord__pb2.NotificationRequest.SerializeToString,
                response_deserializer=chord__pb2.NotificationReply.FromString,
                )
        self.distributeKeys = channel.unary_unary(
                '/Node/distributeKeys',
                request_serializer=chord__pb2.DistributeRequest.SerializeToString,
                response_deserializer=chord__pb2.DistributeReply.FromString,
                )


class NodeServicer(object):
    """//////////////////////////////////////////////////////////////////////////////////////////////////////////

    the node service
    """

    def get_finger_table(self, request, context):
        """the same classes used by the Registry are used by the Node as they have the same fields

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def save_key(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def remove_key(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def find_key(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def quit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def predecessor_notification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def successor_notification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def distributeKeys(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_finger_table': grpc.unary_unary_rpc_method_handler(
                    servicer.get_finger_table,
                    request_deserializer=chord__pb2.InfoRequest.FromString,
                    response_serializer=chord__pb2.InfoReply.SerializeToString,
            ),
            'save_key': grpc.unary_unary_rpc_method_handler(
                    servicer.save_key,
                    request_deserializer=chord__pb2.SaveRequest.FromString,
                    response_serializer=chord__pb2.SaveReply.SerializeToString,
            ),
            'remove_key': grpc.unary_unary_rpc_method_handler(
                    servicer.remove_key,
                    request_deserializer=chord__pb2.RemoveRequest.FromString,
                    response_serializer=chord__pb2.RemoveReply.SerializeToString,
            ),
            'find_key': grpc.unary_unary_rpc_method_handler(
                    servicer.find_key,
                    request_deserializer=chord__pb2.FindRequest.FromString,
                    response_serializer=chord__pb2.FindReply.SerializeToString,
            ),
            'quit': grpc.unary_unary_rpc_method_handler(
                    servicer.quit,
                    request_deserializer=chord__pb2.QuitRequest.FromString,
                    response_serializer=chord__pb2.QuitReply.SerializeToString,
            ),
            'predecessor_notification': grpc.unary_unary_rpc_method_handler(
                    servicer.predecessor_notification,
                    request_deserializer=chord__pb2.NotificationRequest.FromString,
                    response_serializer=chord__pb2.NotificationReply.SerializeToString,
            ),
            'successor_notification': grpc.unary_unary_rpc_method_handler(
                    servicer.successor_notification,
                    request_deserializer=chord__pb2.NotificationRequest.FromString,
                    response_serializer=chord__pb2.NotificationReply.SerializeToString,
            ),
            'distributeKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.distributeKeys,
                    request_deserializer=chord__pb2.DistributeRequest.FromString,
                    response_serializer=chord__pb2.DistributeReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Node', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Node(object):
    """//////////////////////////////////////////////////////////////////////////////////////////////////////////

    the node service
    """

    @staticmethod
    def get_finger_table(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/get_finger_table',
            chord__pb2.InfoRequest.SerializeToString,
            chord__pb2.InfoReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def save_key(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/save_key',
            chord__pb2.SaveRequest.SerializeToString,
            chord__pb2.SaveReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def remove_key(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/remove_key',
            chord__pb2.RemoveRequest.SerializeToString,
            chord__pb2.RemoveReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def find_key(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/find_key',
            chord__pb2.FindRequest.SerializeToString,
            chord__pb2.FindReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def quit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/quit',
            chord__pb2.QuitRequest.SerializeToString,
            chord__pb2.QuitReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def predecessor_notification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/predecessor_notification',
            chord__pb2.NotificationRequest.SerializeToString,
            chord__pb2.NotificationReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def successor_notification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/successor_notification',
            chord__pb2.NotificationRequest.SerializeToString,
            chord__pb2.NotificationReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def distributeKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/distributeKeys',
            chord__pb2.DistributeRequest.SerializeToString,
            chord__pb2.DistributeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
