# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import service_pb2 as service__pb2


class ServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.reverse = channel.unary_unary(
        '/Service/reverse',
        request_serializer=service__pb2.Text.SerializeToString,
        response_deserializer=service__pb2.Text.FromString,
        )
    self.split = channel.unary_unary(
        '/Service/split',
        request_serializer=service__pb2.TextSplit.SerializeToString,
        response_deserializer=service__pb2.TextSplitResponse.FromString,
        )
    self.isprime = channel.stream_stream(
        '/Service/isprime',
        request_serializer=service__pb2.Number.SerializeToString,
        response_deserializer=service__pb2.IsPrimeResponse.FromString,
        )


class ServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def reverse(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def split(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def isprime(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'reverse': grpc.unary_unary_rpc_method_handler(
          servicer.reverse,
          request_deserializer=service__pb2.Text.FromString,
          response_serializer=service__pb2.Text.SerializeToString,
      ),
      'split': grpc.unary_unary_rpc_method_handler(
          servicer.split,
          request_deserializer=service__pb2.TextSplit.FromString,
          response_serializer=service__pb2.TextSplitResponse.SerializeToString,
      ),
      'isprime': grpc.stream_stream_rpc_method_handler(
          servicer.isprime,
          request_deserializer=service__pb2.Number.FromString,
          response_serializer=service__pb2.IsPrimeResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Service', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
